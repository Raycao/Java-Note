自訂泛型:
定義與使用泛型:
前面有稍稍提過ArrayList物件，用以放進多種不同物件型態的矩陣
因為不知道會收進什麼型態的物件，所以使用OBject來參考被收集的物件
也以Object型態傳回，因此就必須告編譯器，要讓傳回的物件扮演何種型態

static void printUpperCase(ArrayList names) {
        for(int i = 0; i < names.size(); i++) {
            String name = (String) names.get(i);
            System.out.println(name.toUpperCase());
        }       
}

以上就是把物件從arraylist中取出
並跟編譯器說他們都是要扮演String型態的物件喔
所以你會發現採用object來收集物件，會讓他們失去原本的型態
為了取回物件真正型態，需要在語法上告訴編譯器
才能讓物件扮演自己原本的型態


好，講講泛型(Generics)吧
範例: ArrayList.java

在類別名稱之後的<>內，所標註的E其實是表示一個型態參數
這是可以隨意變換的
利用<>加註，表示這個類別支援泛型

因為這個參數算是暫定的型態
之後可能傳進來的，可能是各種型態
因此用一個暫定的參數會比較好使用
你可以看到範例中的其他方法，需要編譯器檢查型態的地方
都可以使用E，像是add()方法必須檢查傳入的物件型態是E
get()方法必須轉換為E型態。

以此方式在使用ArrayList就會比較方便，例如下:
ArrayList<String> names = new ArrayList<String>();
names.add("Justin");
names.add("Monica");
String name1 = names.get(0);
String name2 = names.get(1);

你可以清楚的知道，現在做的ArrayList叫做names
而names專門收String型態的物件

宣告與建立物件時，使用角括號來告知編譯器
因此就會知道這個物件收集都會是String，取出也會是String
這樣就不必再用括號來轉換型態，也就是當初使用Object型態做ArrayList的缺點

那如果明明是要放進string物件，卻放了不是的物件咧?
這樣編譯器就會檢查出此錯誤

那如果宣告泛型類別，而沒有用型態宣告，這樣的話就會回歸用Object
也就是沒有使用泛行前的做法，例如下:
ArrayList names = new ArrayList();
names.add("Justin");
names.add("Monica");
String name1 = (String) names.get(0);
String name2 = (String) names.get(1);
以此編譯，則會產生警告訊息


編譯器蜜糖:
ArrayList<String> words = new ArrayList<String>();
words.add("one");
String word = words.get(0);

以上是會通過編譯的，如果組譯以上片段，則如下:
ArrayList arraylist = new ArrayList();
arraylist.add("one");
String s = (String)arraylist.get(0);

你會發現，這其實跟之前我們用Object事情一樣
最後都用括號將物件真正型態送回去

所以假設今天有個例子如下:
ArrayList<String> words = new ArrayList<String>();
words.add("one");
Integer number = words.get(0); 
如上程式碼，則會產生編譯錯誤

因為組譯後如下:
ArrayList words = new ArrayList();
words.add("one");
Integer number = (String) words.get(0);
想要將原本是String物件改為Integer物件
這樣會有ClassCastExcetpion的錯誤

另外有關介面支援泛型
如果想排序陣列，可以使用java.util.Arrays的靜態sort()方法
想指定元素順序，可以指定Comparator實作物件，例如下:
public interface Comparator<T> {
    int compare(T o1, T o2);
    ...
}

可以發現也有使用角括號，而T代表參考型態
實作範例: Main.java

範例中ReverseedStringOrder實作Comparator介面
並且有加上需求類型，即角括號內的String型態

前面有提到的匿名內部類別實現方式如下:
Arrays.sort(words, new Comparator<String>() {
    @Override
    public int compare(String s1, String s2) {
        return -s1.compareTo(s2);
    }
});


另外原本我們的宣告方式如下:
ArrayList<String> words = new ArrayListList<String>();

但在JDK7之後可以簡化並改善為下:
ArrayList<String> words = new ArrayList<>();


靜態方法上的泛型:
先前寫過支援泛型的ArrayList了
現在想寫個asArrayList方法可指定不定長度引述
並將之轉換為ArrayList
範例: Util.java

所以要使用此方法就要如下宣告:
ArrayList<String> arrLt = Util.<String>asList("B", "X", "A", "M", "F", "W", "O");

從asList()方法中可以聊解到參數T是String型態
因此可以這樣簡化:
ArrayList<String> arrLt = Util.asList("B", "X", "A", "M", "F", "W", "O");


如果現在定義類別BeanUtil，當中定義方法getBean()，如下:
public class BeanUtil {
    public static <T> T getBean(Map<String, Object> data, String clzName)
                                   throws Exception {
        Class clz = Class.forName(clzName);
        ...略
        return (T) bean; 
    }
}

你可以發現回傳的類別型態與泛型指定型態都為T
所以使用這個方法的宣告就要如下宣告:
Student student = BeanUtil.<Student>getBean(data, "cc.openhome.Student");

很明顯的，你可以明白到我們是要做出Student的型態
所以可以簡化為:
Student student = BeanUtil.getBean(data, "cc.openhome.Student");

就如同上一次的簡化方式一樣
因為編譯器會自動推斷T所代表的型態，因此就不用額外寫<Student>

如果如下例:
String name = BeanUtil.<Student>getBean(data, "cc.openhome.Student").getName();

因為沒有指定<Student>，因此沒有辦法呼叫傳回的Student物件的getName()方法
此時編譯器會將getBean方法回傳的物件當Object物件處理
而Object物件不會有getName()方法，因此會發生錯誤

但剛剛的asList的簡化不會發生錯誤的原因在於
編譯器可以從asList的引數了解到型態參數T是String型態
所以回傳型態會是ArrayList<String>


java.util.Arrays的copyOf()方法可以接受任何型態的陣列
此方法也是因為使用了泛型
編譯器的型態推斷也在此得到方便性



泛型的 extends:
定義泛型時可以定義泛型的邊界
什麼意思呢? 可以看下面:
class Animal {}
class Human extends Animal {}
class Toy {}
class Duck<T extends Animal> {}

public class BoundDemo {
    public static void main(String[] args) {
        Duck<Animal> ad = new Duck<Animal>();
        Duck<Human> hd = new Duck<Human>();
        Duck<Toy> hd = new Duck<Toy>();  // 編譯錯誤
    }
}

可以發現Duck在定義的時候，其泛型類別被定義為只能繼承自Animal
所以根據定義，如果要做為Duck的泛型型態
並屬於Animal類別之子類別的，只有Animal與Human
Toy明顯不符合此規則


再來看範例: Util2.java
在此範例中，泛型類別皆要求要繼承自Comparable介面
例如String實作了Comparable介面，因此可以使用sort方法，如下:
String[] words = {"B", "X", "A", "M", "F", "W", "O"};
Util2.sort(words);

如果extends指定類別或介面之後，想在指定其他介面
可以使用&符號進行連接，例如下:
public class Some<T extends Iterable<T> & Comparable<T>> {
    ...
}


泛型中的型態通配字元"?"
定義類別: Node.java
接下來設定Fruit類別繼承體系
範例: Fruit.java

以下程式片段會發生錯誤:
Node<Apple> apple = new Node<>(new Apple(), null);
Node<Fruit> fruit = apple;  // 編譯錯誤，incompatible types

語法上都是正確的，但是在第二行發生錯誤
apple的型態為Node<Apple>，fruit型態為Node<Fruit>
我認為Node<Apple>是一種Node<Fruit>，但編譯器卻不這麼認為


如果B是A的子類別，而Node<B>可視為一種Node<A>
則稱Node具有共變性（Covariance）或有彈性的（flexible）
但剛剛的例子顯然，java的泛型不具有共變性
不過可以使用型態通配字元"?"與extends來宣告變數，使其達到類似共變性
例子如下:
Node<Apple> apple = new Node<>(new Apple(), null);
Node<? extends Fruit> fruit = apple; // 類似共變性效果
因為型態Apple是一種型態Fruit，因此這樣是可以通過編譯的
範例: CovarianceDemo.java


泛型的 super:
如果B是A的子類別，如果Node<A>視為一種Node<B>
則稱Node具有逆變性（Contravariance）
如果以下程式碼片段沒有發生錯誤，則Node具有逆變性：
Node<Fruit> fruit = new Node<>(new Fruit(), null);
Node<Banana> node = fruit;  // 實際上會編譯錯誤

實際上java不支援逆變性，因此上述的第二行會編譯錯誤
但我們可以使用通配字元及super來宣告，藉以達到逆變性效果
例如下:
Node<Fruit> fruit = new Node<>(new Fruit(), null);
Node<? super Banana> node = fruit;
Node<? super Apple> node = fruit;



